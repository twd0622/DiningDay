<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Store">
	
	<insert id="menuInsert" parameterType="map">
		insert		
			into STORE_IMAGE
				( STORE_NO
				, PHOTO_NO
				, PHOTO_NAME
				, PHOTO_TYPE
				)
			values
				( #{STORE_NO}
				, (select concat('PH', ifnull(max(cast(REPLACE(#{MENU_NO}, 'ME', '') as unsigned)), 1))
					 from STORE_IMAGE a)
				, #{PHOTO_NAME}
				, #{MENU_NO}
				)
				;
		insert		
			into MENU
				( STORE_NO
				, MENU_NO
				, MENU_NAME
				, MENU_PRICE
				, MENU_HIDE
				, MENU_INFO
				)
			values
				( #{STORE_NO}										
				, #{MENU_NO}
				, #{MENU_NAME}
				, #{MENU_PRICE}
				, #{MENU_HIDE}
				, #{MENU_INFO}
				)
				;		
	</insert>
	
	<select id="menuList" parameterType="map" resultType="map">
		select m.MENU_NAME, s.PHOTO_NAME, m.MENU_INFO, m.MENU_PRICE, m.MENU_HIDE, m.MENU_NO 
		  from MENU m 
		  left join STORE_IMAGE s
		    on (m.MENU_NO, m.STORE_NO) = (s.PHOTO_TYPE, s.STORE_NO)
		 where 1 = 1
		   and m.STORE_NO = #{STORE_NO}   
		 order by CAST(REPLACE(m.MENU_NO, "ME", "") AS UNSIGNED) desc
		 ;   
	</select>
	
	<update id="menuUpdate" parameterType="map">
		update MENU m, STORE_IMAGE s
	   	   set 
			  	m.MENU_NAME = #{MENU_NAME}
		  	  , s.PHOTO_NAME = #{PHOTO_NAME}
		  	  , m.MENU_INFO = #{MENU_INFO}
		  	  , m.MENU_PRICE = #{MENU_PRICE}
	      	  , m.MENU_HIDE = #{MENU_HIDE}
	   	 where 1 = 1
	   	   and m.MENU_NO = s.PHOTO_TYPE
	   	   and m.STORE_NO = #{STORE_NO}
	       and m.MENU_NO = #{MENU_NO}
	       ;
	</update>
	
 	<select id="menuSelect" parameterType="map" resultType="map">
 		select m.MENU_NAME, s.PHOTO_NAME, m.MENU_INFO, m.MENU_PRICE, m.MENU_HIDE, m.MENU_NO
		  from MENU m 
		  join STORE_IMAGE s
		    on m.MENU_NO = s.PHOTO_TYPE
		 where 1 = 1
	 	   and m.MENU_NO = #{MENU_NO}
	   	   and m.STORE_NO = #{STORE_NO}
	   	   ;
 	</select>
 	
 	<select id="menuMax" parameterType="map" resultType="map">
 		SELECT CONCAT("ME", ifnull(MAX(CAST(REPLACE(MENU_NO, "ME", "") AS UNSIGNED)), 0) + 1) as "MENU_NO"
		  FROM MENU
		 where 1 = 1
		   and STORE_NO = #{STORE_NO}
		   ;
 	</select>
 	
 	<delete id="menuDelete" parameterType="map">
 		DELETE A, B
		  FROM MENU A INNER JOIN STORE_IMAGE B 
		 WHERE 1 = 1 
		   AND A.MENU_NO = B.PHOTO_TYPE 
		   AND A.STORE_NO = B.STORE_NO
		   AND A.MENU_NO in
		<foreach collection="MENU_NO" item="MENUList" open="(" close=")" separator=",">
			#{MENUList}
		</foreach>
		   AND A.STORE_NO in 
		<foreach collection="STORE_NO" item="STOREPK" open="(" close=")" separator=",">
			#{STOREPK}
		</foreach>   
		   ;   
 	</delete>
 	<!--  메뉴 sql 끝 -->
	
	<!--  식당 메인 시작 -->
 	<select id="ownerSelect" parameterType="map" resultType="map">
 		SELECT STORE_NO, OWN_NO
 		  FROM OWNER
 		 WHERE 1 = 1
 		   and OWN_NO = #{OWN_NO}
 		     ;
 	</select>
 	
 	<insert id="storeInsert" parameterType="map">
 		insert 
			into STORE
				( 
		          STORE_NO
				, OWN_NO
				, STORE_NAME
				, STORE_TEL
				, STORE_LOCATION
				, STORE_CATEGORY
				, STORE_DETAIL
				, STORE_INFO
				, STORE_PLUS
				, STORE_ST
				, STORE_ET
				, STORE_RT
				, STORE_BTS
				, STORE_BTE
				, STORE_LO
				, STORE_RST
				, STORE_RET
				, STORE_CLOSE
				)
			VALUES
				(
		          concat('ST', replace(#{STORE_NO}, '0', "") + CAST(replace(#{OWN_NO}, 'OW', "") AS UNSIGNED))
		        , #{OWN_NO}
		        , #{STORE_NAME}
		        , #{STORE_TEL}
		        , #{STORE_LOCATION}
		        , #{STORE_CATEGORY}
		        , #{STORE_DETAIL}
		        , #{STORE_INFO}
		        , #{STORE_PLUS}
		        , date_format(STR_TO_DATE(#{STORE_ST}, '%h:%i:%p'), '%H%i')
		        , date_format(STR_TO_DATE(#{STORE_ET}, '%h:%i:%p'), '%H%i')
		        , #{STORE_RT}
		        , if(#{STORE_BTS} = '0', '0', date_format(STR_TO_DATE(#{STORE_BTS}, '%h:%i:%p'), '%H%i'))
		        , if(#{STORE_BTE} = '0', '0', date_format(STR_TO_DATE(#{STORE_BTE}, '%h:%i:%p'), '%H%i'))
		        , #{STORE_LO}
		        , date_format(STR_TO_DATE(#{STORE_RST}, '%h:%i:%p'), '%H%i')
		        , date_format(STR_TO_DATE(#{STORE_RET}, '%h:%i:%p'), '%H%i')
		        , #{STORE_CLOSE}
		        )
		        ;
		        
		insert
			into STORE_IMAGE
				(
				  STORE_NO
		        , PHOTO_NO
		        , PHOTO_NAME
		        , PHOTO_TYPE
				)
		    values
				(
		          concat('ST', replace(#{STORE_NO}, '0', "") + CAST(replace(#{OWN_NO}, 'OW', "") AS UNSIGNED))
		        , 'PH1'
		        , #{SU1_PHOTO_NAME}
		        , 'SU1'
				)
		        ,
		        (
		          concat('ST', replace(#{STORE_NO}, '0', "") + CAST(replace(#{OWN_NO}, 'OW', "") AS UNSIGNED))
		        , 'PH2'
		        , #{BA1_PHOTO_NAME}
		        , 'BA1'
				)
		        ,
		        (
				  concat('ST', replace(#{STORE_NO}, '0', "") + CAST(replace(#{OWN_NO}, 'OW', "") AS UNSIGNED))
		        , 'PH3'
		        , #{BA2_PHOTO_NAME}
		        , 'BA2'
				)
				;
 	</insert>
 	<update id="firstInsertStore_OwnerUpdate" parameterType="map">
 		update OWNER
 		   set STORE_NO = (select STORE_NO
 		                     from STORE
 		                    where OWN_NO = #{OWN_NO})
 		 where OWN_NO = #{OWN_NO}
 		       ;              
 	</update>
 	
 	<select id="storeSelect" parameterType="map" resultType="map">
		   select 
				s.STORE_NO
			  , s.OWN_NO
		      , s.STORE_NAME
		      , s.STORE_TEL
		      , s.STORE_LOCATION
		      , s.STORE_CATEGORY
		      , s.STORE_DETAIL
		      , s.STORE_INFO
		      , s.STORE_PLUS
		      , date_format(str_to_date(STORE_ST, '%H%i') , '%h:%i:%p') as "STORE_ST"
		      , date_format(str_to_date(STORE_ET, '%H%i') , '%h:%i:%p') as "STORE_ET"
		      , s.STORE_RT
		      , date_format(str_to_date(STORE_BTS, '%H%i') , '%h:%i:%p') as "STORE_BTS"
		      , date_format(str_to_date(STORE_BTE, '%H%i') , '%h:%i:%p') as "STORE_BTE"
		      , s.STORE_LO
		      , date_format(str_to_date(STORE_RST, '%H%i') , '%h:%i:%p') as "STORE_RST"
		      , date_format(str_to_date(STORE_RET, '%H%i') , '%h:%i:%p') as "STORE_RET"
		      , s.STORE_CLOSE
		      , si.BA1
		      , si.BA2
		      , si.SU1
		      , ifnull(re.REV_SCORE, 0) as "REV_SCORE"
		  from STORE s
		  left join (select 
					STORE_NO
				  , max(case when PHOTO_TYPE = 'BA1' then PHOTO_NAME end) as "BA1"
				  , max(case when PHOTO_TYPE = 'BA2' then PHOTO_NAME end) as "BA2"
				  , max(case when PHOTO_TYPE = 'SU1' then PHOTO_NAME end) as "SU1"
				  from STORE_IMAGE
				 group by STORE_NO) si
			on s.STORE_NO = si.STORE_NO
		  left join (select 
					STORE_NO
				  , avg(REV_SCORE) as "REV_SCORE"
				  from REVIEW
		         group by STORE_NO) re
			on s.STORE_NO = re.STORE_NO
		 where s.STORE_NO = #{STORE_NO}
			   ;	
 	</select>
 	
<!-- ===================== 1/17 준우 작성 건들 ㄴㄴ ===================== -->
 	<select id="getReviewList" parameterType="map" resultType="map">
 		select R.REV_NO
			 , R.CUS_NICK
		     , R.STORE_NO
		     , (SELECT GROUP_CONCAT(concat(MENU_NAME,'/',MENU_COUNT)) MENU_NAME FROM RESERVATION_MENU WHERE RES_NO = R.RES_NO GROUP BY RES_NO) MENU_NAME
		     , (select SEAT_NAME from SEAT where SEAT_NO = R.SEAT_NO and STORE_NO = R.STORE_NO) SEAT_NAME
		     , R.REV_CONTENT
		     , CAST(str_to_date(R.REV_DATE, '%Y%m%d%H%i%s') AS CHAR(30)) REV_DATE
		     , R.REV_SCORE
		     , R.REV_GOOD
		     , ifnull(R.REV_IMAGE, '0') REV_IMAGE
		     , RA.ANSWER_CONTENT
		     , CAST(str_to_date(RA.ANSWER_DATE, '%Y%m%d%H%i%s') AS CHAR(30)) ANSWER_DATE
		     , ifnull(RA.ANSWER_CONTENT, '2') 'SELECT'
		from REVIEW R
		left join REVIEW_ANSWER RA
		  on R.REV_NO = RA.REV_NO
		where 1=1
		  and R.STORE_NO = #{STORE_NO}
		  <if test='select == "2"'> <!-- 답글 미작성 -->
		  and RA.ANSWER_CONTENT is null
		  </if>
		  <if test='select == "1"'> <!-- 답글 작성 -->
		  and RA.ANSWER_CONTENT is not null
		  </if>
		  ;
 	</select>
 	
 	<insert id="answerInsert" parameterType="map">
 		insert into REVIEW_ANSWER
		values(#{REV_NO}, #{STORE_NO}, #{ANSWER_CONTENT}, date_format(now(),'%Y%m%d%H%i%s'));
 	</insert>
 	
 	<select id="getAnswer" parameterType="map" resultType="map">
 		select REV_NO
 		     , ST_NO
 		     , ANSWER_CONTENT
 		     , CAST(str_to_date(ANSWER_DATE, '%Y%m%d%H%i%s') AS CHAR(30)) ANSWER_DATE
          from REVIEW_ANSWER
         where REV_NO = #{REV_NO};
 	</select>
 	
<!-- ===================== 여기 까지 s_review ===================== -->
 	
</mapper>





