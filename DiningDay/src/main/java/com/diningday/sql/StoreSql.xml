<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Store">
	
	<insert id="menuInsert" parameterType="map">
	
		insert		
			into STORE_IMAGE
				( STORE_NO
				, PHOTO_NO
				, PHOTO_NAME
				, PHOTO_TYPE
				)
			values
				( #{STORE_NO}
				, (SELECT CONCAT("PH", ifnull(MAX(CAST(REPLACE(PHOTO_NO, "PH", "") AS UNSIGNED)), 0) + 1) as "PHOTO_NO"
					 FROM STORE_IMAGE a
					where 1 = 1
					  and STORE_NO = #{STORE_NO})
				, #{PHOTO_NAME}
				, #{MENU_NO}
				)
				;
		insert		
			into MENU
				( STORE_NO
				, MENU_NO
				, MENU_NAME
				, MENU_PRICE
				, MENU_HIDE
				, MENU_INFO
				)
			values
				( #{STORE_NO}										
				, #{MENU_NO}
				, #{MENU_NAME}
				, #{MENU_PRICE}
				, #{MENU_HIDE}
				, #{MENU_INFO}
				)
				;		
	</insert>
	
	<select id="menuList" parameterType="map" resultType="map">
	
		select m.MENU_NAME, s.PHOTO_NAME, m.MENU_INFO, m.MENU_PRICE, m.MENU_HIDE, m.MENU_NO 
		  from MENU m 
		  left join STORE_IMAGE s
		    on (m.MENU_NO, m.STORE_NO) = (s.PHOTO_TYPE, s.STORE_NO)
		 where 1 = 1
		   and m.STORE_NO = #{STORE_NO}   
		 order by CAST(REPLACE(m.MENU_NO, "ME", "") AS UNSIGNED)
		 ;   
	</select>

	<update id="menuUpdate" parameterType="map">
	
		update MENU m, STORE_IMAGE s
	   	   set 
			  	m.MENU_NAME = #{MENU_NAME}
		  	  , s.PHOTO_NAME = #{PHOTO_NAME}
		  	  , m.MENU_INFO = #{MENU_INFO}
		  	  , m.MENU_PRICE = #{MENU_PRICE}
	      	  , m.MENU_HIDE = #{MENU_HIDE}
	   	 where 1 = 1
	   	   and m.MENU_NO = s.PHOTO_TYPE
	   	   and m.STORE_NO = #{STORE_NO}
	       and m.MENU_NO = #{MENU_NO}
	       ;
	</update>
	
 	<select id="menuSelect" parameterType="map" resultType="map">
 	
 		select m.MENU_NAME, s.PHOTO_NAME, m.MENU_INFO, m.MENU_PRICE, m.MENU_HIDE, m.MENU_NO
		  from MENU m 
		  join STORE_IMAGE s
		    on (m.MENU_NO, m.STORE_NO) = (s.PHOTO_TYPE, s.STORE_NO)
		 where 1 = 1
	 	   and m.MENU_NO = #{MENU_NO}
	   	   and m.STORE_NO = #{STORE_NO}
	   	   ;
 	</select>
 	
 	<select id="menuMax" parameterType="map" resultType="map">
 	
 		SELECT CONCAT("ME", ifnull(MAX(CAST(REPLACE(MENU_NO, "ME", "") AS UNSIGNED)), 0) + 1) as "MENU_NO"
 			  ,(select STORE_NAME
 			      from STORE a
 			     where STORE_NO = #{STORE_NO}) as "STORE_NAME"
		  FROM MENU
		 where 1 = 1
		   and STORE_NO = #{STORE_NO}
		   ;
 	</select>
 	
 	<delete id="menuDelete" parameterType="map">
 	
 		DELETE A, B
		  FROM MENU A INNER JOIN STORE_IMAGE B 
		 WHERE 1 = 1 
		   AND A.MENU_NO = B.PHOTO_TYPE 
		   AND A.STORE_NO = B.STORE_NO
		   AND A.MENU_NO in
		<foreach collection="MENU_NO" item="MENUList" open="(" close=")" separator=",">
			#{MENUList}
		</foreach>
		   AND A.STORE_NO in 
		<foreach collection="STORE_NO" item="STOREPK" open="(" close=")" separator=",">
			#{STOREPK}
		</foreach>   
		   ;   
 	</delete>
 	<!--  메뉴 sql 끝 -->
	
	<!--  식당 메인 시작 -->
 	<select id="ownerSelect" parameterType="map" resultType="map">
 	
 		SELECT STORE_NO, OWN_NO
 		  FROM OWNER
 		 WHERE 1 = 1
 		   and OWN_NO = #{OWN_NO}
 		     ;
 	</select>
 	
 	<insert id="storeInsert" parameterType="map">
 	
 		insert 
			into STORE
				( 
		          STORE_NO
				, OWN_NO
				, STORE_NAME
				, STORE_TEL
				, STORE_LOCATION
				, STORE_CATEGORY
				, STORE_DETAIL
				, STORE_INFO
				, STORE_PLUS
				, STORE_ST
				, STORE_ET
				, STORE_RT
				, STORE_BTS
				, STORE_BTE
				, STORE_LO
				, STORE_RST
				, STORE_RET
				, STORE_CLOSE
				)
			VALUES
				(
		          concat('ST', replace(#{STORE_NO}, '0', "") + CAST(replace(#{OWN_NO}, 'OW', "") AS UNSIGNED))
		        , #{OWN_NO}
		        , #{STORE_NAME}
		        , #{STORE_TEL}
		        , #{STORE_LOCATION}
		        , #{STORE_CATEGORY}
		        , #{STORE_DETAIL}
		        , #{STORE_INFO}
		        , #{STORE_PLUS}
		        , date_format(STR_TO_DATE(#{STORE_ST}, '%h:%i:%p'), '%H%i')
		        , date_format(STR_TO_DATE(#{STORE_ET}, '%h:%i:%p'), '%H%i')
		        , #{STORE_RT}
		        , if(#{STORE_BTS} = '0', '0', date_format(STR_TO_DATE(#{STORE_BTS}, '%h:%i:%p'), '%H%i'))
		        , if(#{STORE_BTE} = '0', '0', date_format(STR_TO_DATE(#{STORE_BTE}, '%h:%i:%p'), '%H%i'))
		        , #{STORE_LO}
		        , date_format(STR_TO_DATE(#{STORE_RST}, '%h:%i:%p'), '%H%i')
		        , date_format(STR_TO_DATE(#{STORE_RET}, '%h:%i:%p'), '%H%i')
		        , #{STORE_CLOSE}
		        )
		        ;
		        
		insert
			into STORE_IMAGE
				(
				  STORE_NO
		        , PHOTO_NO
		        , PHOTO_NAME
		        , PHOTO_TYPE
				)
		    values
				(
		          concat('ST', replace(#{STORE_NO}, '0', "") + CAST(replace(#{OWN_NO}, 'OW', "") AS UNSIGNED))
		        , 'PH1'
		        , #{SU1_PHOTO_NAME}
		        , 'SU1'
				)
		        ,
		        (
		          concat('ST', replace(#{STORE_NO}, '0', "") + CAST(replace(#{OWN_NO}, 'OW', "") AS UNSIGNED))
		        , 'PH2'
		        , #{BA1_PHOTO_NAME}
		        , 'BA1'
				)
		        ,
		        (
				  concat('ST', replace(#{STORE_NO}, '0', "") + CAST(replace(#{OWN_NO}, 'OW', "") AS UNSIGNED))
		        , 'PH3'
		        , #{BA2_PHOTO_NAME}
		        , 'BA2'
				)
				;
 	</insert>
 	<update id="firstInsertStore_OwnerUpdate" parameterType="map">
 	
 		update OWNER
 		   set STORE_NO = (select STORE_NO
 		                     from STORE
 		                    where OWN_NO = #{OWN_NO})
 		 where OWN_NO = #{OWN_NO}
 		       ;              
 	</update>
 	
 	<select id="storeSelect" parameterType="map" resultType="map">
 	
		   select 
				s.STORE_NO
			  , s.OWN_NO
		      , s.STORE_NAME
		      , s.STORE_TEL
		      , s.STORE_LOCATION
		      , s.STORE_CATEGORY
		      , s.STORE_DETAIL
		      , s.STORE_INFO
		      , s.STORE_PLUS
		      , date_format(str_to_date(STORE_ST, '%H%i') , '%h:%i:%p') as "STORE_ST"
		      , date_format(str_to_date(STORE_ET, '%H%i') , '%h:%i:%p') as "STORE_ET"
		      , s.STORE_RT
		      , date_format(str_to_date(STORE_BTS, '%H%i') , '%h:%i:%p') as "STORE_BTS"
		      , date_format(str_to_date(STORE_BTE, '%H%i') , '%h:%i:%p') as "STORE_BTE"
		      , s.STORE_LO
		      , date_format(str_to_date(STORE_RST, '%H%i') , '%h:%i:%p') as "STORE_RST"
		      , date_format(str_to_date(STORE_RET, '%H%i') , '%h:%i:%p') as "STORE_RET"
		      , s.STORE_CLOSE
		      , si.BA1
		      , si.BA2
		      , si.SU1
		      , (select cast(format(avg(REV_SCORE), 1) AS CHAR(10)) as REV_SCORE
				  from REVIEW
				 where STORE_NO = s.STORE_NO
				 group by STORE_NO) as REV_SCORE
		  from STORE s
		  left join (select 
					STORE_NO
				  , max(case when PHOTO_TYPE = 'BA1' then PHOTO_NAME end) as "BA1"
				  , max(case when PHOTO_TYPE = 'BA2' then PHOTO_NAME end) as "BA2"
				  , max(case when PHOTO_TYPE = 'SU1' then PHOTO_NAME end) as "SU1"
				  from STORE_IMAGE
				 group by STORE_NO) si
			on s.STORE_NO = si.STORE_NO
		  left join (select 
					STORE_NO
				  , avg(REV_SCORE) as "REV_SCORE"
				  from REVIEW
		         group by STORE_NO) re
			on s.STORE_NO = re.STORE_NO
		 where s.STORE_NO = #{STORE_NO}
			   ;	
 	</select>
 	
<!-- 식당 메인 끝 -->

<!-- 식당 좌석 시작 -->
 	
 	<insert id="seatInsert" parameterType="map">
 	
 	 	insert
 	 		into SEAT
 	 			( SEAT_NO
 	 			, STORE_NO
 	 			, SEAT_NAME
 	 			, SEAT_MIN
 	 			, SEAT_MAX
 	 			, SEAT_CONTENT
 	 			, SEAT_OC
 	 			)
 	 		values
 	 			(
 	 			  (SELECT CONCAT("SE", ifnull(MAX(CAST(REPLACE(SEAT_NO, "SE", "") AS UNSIGNED)), 0) + 1) as "SEAT_NO"
				     FROM SEAT a
				    where 1 = 1
				      and STORE_NO = #{STORE_NO})
 	 			, #{STORE_NO}
 	 			, #{SEAT_NAME}
 	 			, #{SEAT_MIN}
 	 			, #{SEAT_MAX}
 	 			, #{SEAT_CONTENT}
 	 			, #{SEAT_OC}
 	 			)
 	 			;
 	 	insert
 	 		into STORE_IMAGE
 	 			(
 	 			  PHOTO_NO
 	 			, STORE_NO
 	 			, PHOTO_NAME
 	 			, PHOTO_TYPE  
 	 			)
 	 		values
 	 			(
 	 			  (SELECT CONCAT("PH", ifnull(MAX(CAST(REPLACE(PHOTO_NO, "PH", "") AS UNSIGNED)), 0) + 1) as "PHOTO_NO"
				     FROM STORE_IMAGE a
				    where 1 = 1
				      and STORE_NO = #{STORE_NO})
 	 			, #{STORE_NO}
 	 			, #{PHOTO_NAME}
 	 			, (select CONCAT("SE", ifnull(MAX(CAST(REPLACE(SEAT_NO, "SE", "") AS UNSIGNED)), 0)) as "SEAT_NO"
 	 			     from SEAT b
 	 			    where 1 = 1
 	 			      and STORE_NO = #{STORE_NO})
 	 			)
 	 			;	
 	 					
 	</insert>
 	
 	<select id="seatSelectList" parameterType="map" resultType="map">
 	
 		select SEAT_NO
			 , s.SEAT_NAME
		     , s.SEAT_MIN
		     , s.SEAT_MAX
		     , s.SEAT_CONTENT
		     , s.SEAT_OC
		     , (select PHOTO_NAME
		          from STORE_IMAGE
				 where 1 = 1
				   and STORE_NO = s.STORE_NO
				   and PHOTO_TYPE = s.SEAT_NO) as "PHOTO_NAME"
		  from SEAT s
		  join STORE_IMAGE si
		    on (s.STORE_NO, s.SEAT_NO) = (si.STORE_NO, si.PHOTO_TYPE)
		 where s.STORE_NO = #{STORE_NO};
		 
 	</select>
 	
 	<select id="stableResCheck" parameterType="map" resultType="map">
		
		select REQ_STATE
		  from RESERVATION
		 where 1 = 1
		   and STORE_NO = #{STORE_NO}
		   and SEAT_NO = #{SEAT_NO}
		       ;
		       
 	</select>
 	
 	<update id="seatUpdate" parameterType="map">
 		update SEAT s, STORE_IMAGE si
	   	   set 
			  	 s.SEAT_NAME = #{SEAT_NAME}
		  	   , si.PHOTO_NAME = #{PHOTO_NAME}
		  	   , s.SEAT_OC = #{SEAT_OC}
		  	   , s.SEAT_MIN = #{SEAT_MIN}
	      	   , s.SEAT_MAX = #{SEAT_MAX}
	      	   , s.SEAT_CONTENT = #{SEAT_CONTENT}
	   	 where 1 = 1
	   	   and s.SEAT_NO = si.PHOTO_TYPE
	   	   and s.STORE_NO = #{STORE_NO}
	       and s.SEAT_NO = #{SEAT_NO}
	           ;
	   
 	</update>
 	
 	<delete id="seatDelete" parameterType="map">
 		DELETE S, P
		  FROM SEAT S INNER JOIN STORE_IMAGE P 
		 WHERE 1 = 1 
		   AND S.SEAT_NO = P.PHOTO_TYPE 
		   AND S.STORE_NO = P.STORE_NO
		   AND S.SEAT_NO = #{SEAT_NO}
		   AND S.STORE_NO = #{STORE_NO}
		       ;
 	</delete>
 	
<!-- 식당 좌석 끝 -->
 	
<!-- 예약 시작 -->

	<select id="resSelectList" parameterType="map" resultType="map">
	
		select r.RES_NO
			 , r.PAY_NO
		     , r.SEAT_NO
			 , r.CUS_NO
		     , r.CUS_NAME
		     , r.CUS_TEL
		     , r.RES_REQ
		     , r.REQ_STATE
		     , r.RES_PEOPLE
		     , r.RES_TIME
		     , rm.MENU_NAME
		     , (select SEAT_NAME
				  from SEAT
				 where SEAT_NO = r.SEAT_NO
				   and STORE_NO = r.STORE_NO) as "SEAT_NAME"
			 , (select MERCHANT_UID
			   	  from PAYMENT
			     where RES_NO = r.RES_NO) as "MERCHANT_UID"	   
		  from RESERVATION r
		  join (select PAY_NO, group_concat(MENU_NAME, '/', MENU_COUNT, '/', PAID_PRICE) as "MENU_NAME"
				  from RESERVATION_MENU
				 group by PAY_NO) rm
		    on r.PAY_NO = rm.PAY_NO
		 where 1 = 1
		   and r.STORE_NO = #{STORE_NO}
		   and r.RES_DATE = #{RES_DATE}
		   and r.REQ_STATE = #{REQ_STATE}
		 order by r.RES_TIME
		       ; 
		 
	</select>
	
	<update id="resUpdate" parameterType="map">
		
		update RESERVATION
		   set REQ_STATE = #{REQ_STATE}
		 where 1 = 1
		   and STORE_NO = #{STORE_NO}
		   and RES_NO = #{RES_NO}
			   ;
	</update>

	<select id="resSelect" parameterType="map" resultType="map">
	 	select 
		  (select cast(count(RES_DATE) AS CHAR(10))
			 from RESERVATION a
			where STORE_NO = #{STORE_NO}
			  and REQ_STATE = '2'
		      and RES_DATE like #{RES_DATE_1}) as "RES_DATE_1",
		  (select cast(count(RES_DATE) AS CHAR(10))
			 from RESERVATION a
			where STORE_NO = #{STORE_NO}
			  and REQ_STATE = '2'
		      and RES_DATE like #{RES_DATE_2}) as "RES_DATE_2",
		  (select cast(count(RES_DATE) AS CHAR(10))
			 from RESERVATION a
			where STORE_NO = #{STORE_NO}
			  and REQ_STATE = '2'
		      and RES_DATE like #{RES_DATE_3}) as "RES_DATE_3",
		  (select cast(count(RES_DATE) AS CHAR(10))
			 from RESERVATION a
			where STORE_NO = #{STORE_NO}
			  and REQ_STATE = '2'
		      and RES_DATE like #{RES_DATE_4}) as "RES_DATE_4",
		  (select cast(count(RES_DATE) AS CHAR(10))
			 from RESERVATION a
			where STORE_NO = #{STORE_NO}
			  and REQ_STATE = '2'
		      and RES_DATE like #{RES_DATE_5}) as "RES_DATE_5",   
		  (select cast(count(RES_DATE) AS CHAR(10))
			 from RESERVATION a
			where STORE_NO = #{STORE_NO}
			  and REQ_STATE = '2'
		      and RES_DATE like #{RES_DATE_6}) as "RES_DATE_6",   
		  (select cast(count(RES_DATE) AS CHAR(10))
			 from RESERVATION a
			where STORE_NO = #{STORE_NO}
			  and REQ_STATE = '2'
		      and RES_DATE like #{RES_DATE_7}) as "RES_DATE_7",
		  (select cast(count(RES_DATE) AS CHAR(10))
			 from RESERVATION a
			where STORE_NO = #{STORE_NO}
			  and REQ_STATE = '2'
		      and RES_DATE like #{RES_DATE_8}) as "RES_DATE_8",
		  (select cast(count(RES_DATE) AS CHAR(10))
			 from RESERVATION a
			where STORE_NO = #{STORE_NO}
			  and REQ_STATE = '2'
		      and RES_DATE like #{RES_DATE_9}) as "RES_DATE_9",   
		  (select cast(count(RES_DATE) AS CHAR(10))
			 from RESERVATION a
			where STORE_NO = #{STORE_NO}
			  and REQ_STATE = '2'
		      and RES_DATE like #{RES_DATE_10}) as "RES_DATE_10",    
		  (select cast(count(RES_DATE) AS CHAR(10))
			 from RESERVATION a
			where STORE_NO = #{STORE_NO}
			  and REQ_STATE = '2'
		      and RES_DATE like #{RES_DATE_11}) as "RES_DATE_11",
		  (select cast(count(RES_DATE) AS CHAR(10)) 
			 from RESERVATION a
			where STORE_NO = #{STORE_NO}
			  and REQ_STATE = '2'
		      and RES_DATE like #{RES_DATE_12}) as "RES_DATE_12",
		   (select OWN_DATE
		      from OWNER
			 where STORE_NO = #{STORE_NO}
		       and OWN_NO = #{OWN_NO}) as "OWN_DATE",
		   (select cast(max(year(RES_DATE)) AS CHAR(5)) as MAX_YEAR
   			  from RESERVATION
             where STORE_NO = #{STORE_NO}) as "MAX_YEAR"     
		  ;
		
	</select>
	
	<select id="resMonthSelect" parameterType="map" resultType="map">
	
		select cast(day(RES_DATE) AS CHAR(10)) as "RES_DATE"
			 , cast(count(RES_DATE) AS CHAR(10)) as "RES_COUNT"
			 , case dayofweek(RES_DATE)
		       when '1' then '일요일'
		   	   when '2' then '월요일'
		   	   when '3' then '화요일'
		   	   when '4' then '수요일'
		   	   when '5' then '목요일'
		   	   when '6' then '금요일'
		   	   when '7' then '토요일'
		    	end as "RES_DAY"
		  from RESERVATION
		 where 1 = 1
		   and STORE_NO = #{STORE_NO}
		   and REQ_STATE = '2'
		   and RES_DATE like #{RES_DATE}
		 group by RES_DATE	   
		       ;
	
	</select>
	
	<select id="resWeekSelect" parameterType="map" resultType="map">
		select cast(count(dayofweek(RES_DATE)) AS CHAR(10)) as "RES_COUNT"
		     , cast(dayofweek(RES_DATE) AS CHAR(1)) as "RES_DAY"
		  from RESERVATION
		 where 1 = 1
		   and STORE_NO = #{STORE_NO}
		   and REQ_STATE = '2'
		   and RES_DATE like #{RES_DATE}
		 group by cast(dayofweek(RES_DATE) AS CHAR(1))
		 	   ;
	</select>
	
<!-- 예약 종료 -->

<!-- ===================== 1/17 준우 작성 건들 ㄴㄴ ===================== -->
 	<select id="getReviewList" parameterType="map" resultType="map">
 		select R.REV_NO
			 , R.CUS_NICK
		     , R.STORE_NO
		     , (SELECT GROUP_CONCAT(concat(MENU_NAME,'/',MENU_COUNT)) MENU_NAME FROM RESERVATION_MENU WHERE RES_NO = R.RES_NO GROUP BY RES_NO) MENU_NAME
		     , (select SEAT_NAME from SEAT where SEAT_NO = R.SEAT_NO and STORE_NO = R.STORE_NO) SEAT_NAME
		     , R.REV_CONTENT
		     , CAST(str_to_date(R.REV_DATE, '%Y%m%d%H%i%s') AS CHAR(30)) REV_DATE
		     , R.REV_SCORE
		     , R.REV_GOOD
		     , ifnull(R.REV_IMAGE, '0') REV_IMAGE
		     , RA.ANSWER_CONTENT
		     , CAST(ifnull(concat('(수정) ', str_to_date(RA.ANSWER_UPDATE_DATE, '%Y%m%d%H%i%s')), str_to_date(RA.ANSWER_DATE, '%Y%m%d%H%i%s')) AS CHAR(30)) ANSWER_DATE
		     , ifnull(RA.ANSWER_CONTENT, '2') 'SELECT'
		from REVIEW R
		left join REVIEW_ANSWER RA
		  on R.REV_NO = RA.REV_NO
		where 1=1
		  and R.STORE_NO = #{STORE_NO}
		  <if test='select == "2"'> <!-- 답글 미작성 -->
		  and RA.ANSWER_CONTENT is null
		  </if>
		  <if test='select == "1"'> <!-- 답글 작성 -->
		  and RA.ANSWER_CONTENT is not null
		  </if>
		order by REV_DATE desc
		  ;
 	</select>
 	
 	<insert id="answerInsert" parameterType="map">
 		insert into REVIEW_ANSWER
		values(#{REV_NO}, #{STORE_NO}, #{ANSWER_CONTENT}, date_format(now(),'%Y%m%d%H%i%s'));
 	</insert>
 	
 	<select id="getAnswer" parameterType="map" resultType="map">
 		select REV_NO
 		     , ST_NO
 		     , ANSWER_CONTENT
 		     , CAST(ifnull(concat('(수정) ', str_to_date(ANSWER_UPDATE_DATE, '%Y%m%d%H%i%s')), str_to_date(ANSWER_DATE, '%Y%m%d%H%i%s')) AS CHAR(30)) ANSWER_DATE
          from REVIEW_ANSWER
         where REV_NO = #{REV_NO};
 	</select>
 	
 	<update id="answerUpdate" parameterType="map">
 		update REVIEW_ANSWER
		set ANSWER_CONTENT = #{ANSWER_CONTENT}, ANSWER_UPDATE_DATE = date_format(now(),'%Y%m%d%H%i%s')
		where REV_NO = #{REV_NO};
 	</update>
 	
 	<select id="getReviewInfo" parameterType="String" resultType="map">
	  select count(R.REV_NO) REVIEW_COUNT
	       , count(RA.REV_NO) REVIEW_ANSWER_COUNT
	       , format(avg(R.REV_SCORE), 1) REVIEW_SCORE
	    from REVIEW R
	    LEFT join REVIEW_ANSWER RA
	      on R.REV_NO = RA.REV_NO
	   where R.STORE_NO = #{STORE_NO};
 	</select>
 	
 	<insert id="insertReviewReport" parameterType="map">
 		insert into REVIEW_REPORT (RREP_NO, REV_NO, STORE_NO, RREP_CONTENT, RREP_DATE, RREP_PROCESS)
		VALUES
		( concat("RR", IFNULL((select MAX(cast(replace(RREP_NO, "RR", "") AS unsigned))+1 FROM REVIEW_REPORT A), 1))
		, #{REV_NO}
		, #{STORE_NO}
		, if(#{RREP_CONTENT} = '기타', #{otherContent}, #{RREP_CONTENT})
		, date_format(now(), '%Y%m%d%H%i%s')
		, '0'
		)
 	</insert>
 	
<!-- ===================== 여기 까지 s_review ===================== -->
 	
<!-- 01/17_강현아 + 점주 정보 저장 및 수정 -->
	<select id="getOwner" parameterType="String" resultType="map">
		select OWN_NO    
			  , OWN_ID   
			  , OWN_PW 
			  , OWN_NAME 
			  , OWN_TEL   
			  , OWN_EMAIL 
			  , OWN_CRN 
		from OWNER
		where OWN_NO = #{OWN_NO};
	</select>	
	
	<update id="ownerEdit" parameterType="String">
		update 	OWNER
		set		OWN_NAME	= #{OWN_NAME}
				, OWN_TEL 	= #{OWN_TEL}
				, OWN_EMAIL = #{OWN_EMAIL}
				, OWN_REDATE= DATE_FORMAT(SYSDATE(), '%Y%m%d%H%i%s')
		where	OWN_NO = #{OWN_NO};
	</update>	
	 	
</mapper>





